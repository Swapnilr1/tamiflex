{"name":"Tamiflex","tagline":"TamiFlex facilitates static analysis of programs that use reflection and custom class loaders","body":"A small request to our users\r\n\r\nWe would appreciate if you could briefly let us know about how you use TamiFlex. \r\n[To do so, click here. It will only take a minute. Thanks!](https://spreadsheets.google.com/spreadsheet/viewform?formkey=dHdkbVM1ZW5kRHZPZzZ4a2otRUNmZnc6MQ) \r\n\r\n### News\r\n* September 18th, 2012: [TamiFlex 2.0.1](https://github.com/secure-software-engineering/tamiflex/releases/tag/V2.0.1) is out! Read more about this release in the [ChangeLog](https://github.com/secure-software-engineering/tamiflex/releases/tag/V2.0.1)\r\n* September 25th, 2011: [TamiFlex 2.0](https://github.com/secure-software-engineering/tamiflex/releases/tag/V2.0) is out! Read more about this release in the [ChangeLog](https://github.com/secure-software-engineering/tamiflex/releases/tag/V2.0)\r\n* May 25th, 2011: Download out ICSE presentation here as [Keynote](https://github.com/secure-software-engineering/tamiflex/wiki/20110526%20-%20ICSE%20-%20TamiFlex.key) or [PDF](https://github.com/secure-software-engineering/tamiflex/wiki/20110526%20-%20ICSE%20-%20TamiFlex.pdf) file. You may use it under the [Creative Commons “Attribution-ShareAlike” license](http://creativecommons.org/licenses/by-sa/3.0/).\r\n* November 19th, 2010: Our ICSE submission on TamiFlex was accepted for publication. You can [access the paper here](http://www.bodden.de/pubs/bss+11taming.pdf).\r\n* August 4th, 2010: Today we are releasing [Version 1.1](https://github.com/secure-software-engineering/tamiflex/releases/tag/V1.1) of TamiFlex. Consult the [change log](https://github.com/secure-software-engineering/tamiflex/releases/tag/V1.1) to see what's new.\r\n\r\n## What is TamiFlex?\r\nTamiFlex is a tool suite to facilitate static analyses of Java programs that use reflection and custom class loaders. The suite consists of two agents that use the java.lang.instrument API, one Play-out Agent and one Play-in Agent. Our Overview document gives more details.\r\n\r\n## What features does TamiFlex offer?\r\n\r\nTamiFlex consists of three components, the **Play-out Agent**, the **Play-in Agent** and the **Booster**.\r\n\r\nThe **Play-out Agent** allows you to:\r\n\r\n* monitor a Java program using any Java-6 compliant JVM,\r\n** dumping a **reflection trace file**, providing information about reflective calls on the program run, and\r\n** **dumping all classes** that the virtual machine loaded on this run, including runtime-generated classes\r\n\r\nThe **Booster** takes as input a class-file folder and reflection log produced by the Play-Out Agent and produces as output an enriched version of the program that contains \"materialized\" versions of the original reflective calls in the form of standard Java method calls. Statically analyzing the \"boosted\" program instead of the original program allows static-analysis tools to treat the reflective calls just as standard Java method calls.\r\n\r\nWith the **Play-in Agent** you can cause the virtual machine to **load classes from a specified directory** instead of from they would normally be loaded from. This is useful for replacing classes by statically optimized classes irrespective of the program's class-loading setup.\r\n\r\n## Who are the creators of TamiFlex?\r\n\r\nTamiFlex is a joint effort of Eric Bodden, Andreas Sewe, Jan Sinschek and Mira Mezini, of the [Software Technology Group](http://www.stg.tu-darmstadt.de) and [Secure Software Engineering Group](http://sse.ec-spride.de/) at TU Darmstadt. This work is supported by [CASED](http://www.cased.de/).\r\n\r\nTamiFlex uses technology from ASM, which is under [this OS license](http://asm.ow2.org/license.html), and from [Soot](https://github.com/Sable/soot), which is under LGPL.\r\n\r\n## Documentation\r\n\r\n[This document](https://github.com/secure-software-engineering/tamiflex/wiki/Overview) gives an Overview of TamiFlex.\r\n\r\n## Using TamiFlex\r\n\r\nOur [Usage page](https://github.com/secure-software-engineering/tamiflex/wiki/Usage) tells you how to use TamiFlex.\r\n\r\n## Using TamiFlex with DaCapo and Soot\r\n\r\nTamiFlex enables static whole-program analysis of DaCapo benchmarks using Soot. [Here you can read more](https://github.com/secure-software-engineering/tamiflex/wiki/DaCapoAndSoot) about how this works.\r\n\r\n## Scientific Papers\r\n\r\nIf you are interested in the internal workings of TamiFlex, please consult our [ICSE 2011 paper](http://www.bodden.de/pubs/bss+11taming.pdf) or our [Technical Report](http://www.bodden.de/pubs/TUD-CS-2010-0066.pdf).\r\n\r\n## Benchmarks\r\n\r\nWe also have all benchmarking results from this Tech Report online, along with scripts to reproduce them. Please consult our [Benchmarks page](https://github.com/secure-software-engineering/tamiflex/wiki/Benchmarks) for details and also see [this Github project](https://github.com/secure-software-engineering/tamiflex.benchmarks/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}